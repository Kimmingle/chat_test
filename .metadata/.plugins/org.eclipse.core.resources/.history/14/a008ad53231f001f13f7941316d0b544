package com.morning.ctrl;

import java.util.ArrayList;
import java.util.List;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.RemoteEndpoint.Basic;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;

@Controller
@ServerEndpoint(value="/echo.do")
public class WebSocketChat {
	private static final List<Session> sessionList = new ArrayList<Session>();
	private static final Logger logger = LoggerFactory.getLogger(WebSocketChat.class);  //현재 클래스 
	
	public WebSocketChat() {
		//호출됨= 만들어짐
		System.out.println("웹소켓(서버) 객체생성");
	}
	
	
	
	//소켓이 정상연결되면
	@OnOpen
	public void onOpen(Session session) {
		logger.info("Open Session : "+session.getId());
		
		try {
			final Basic basic = session.getBasicRemote();
			basic.sendText("대화방 연결됨");
			
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}
		sessionList.add(session);
	}
	
	 @OnMessage
	 public void onMessage(String message,Session session) {
	    	
	    String sender = message.split(",")[1];
	    message = message.split(",")[0];
	    	
	    logger.info("Message From "+sender + ": "+message);
	    try {
	            final Basic basic=session.getBasicRemote();
	            basic.sendText("<나> : "+message);
	    }catch (Exception e) {
	            // TODO: handle exception
	            System.out.println(e.getMessage());
	    }
		//현재 세션을 가진 사람 모두에게 보냄
		sendAllSessionToMessage(session, sender, message);
	}
	 
	 private void sendAllSessionToMessage(Session self, String sender, String message) {
	    	
	        try {
	            for(Session session : WebSocketChat.sessionList) {
	                if(!self.getId().equals(session.getId())) {
	                    session.getBasicRemote().sendText(sender+" : "+message);
	                }
	            }
	        }catch (Exception e) {
	            // TODO: handle exception
	            System.out.println(e.getMessage());
	        }
	    }
	
	@OnError
	public void onError(Throwable t, Session session) {
		//에러뜨면 출력
		//log.info(t.getMessage()+"by session : " +session.getId());  //getId:세션 값
	}
	
	@OnClose  //닫으면 호출될것
	public void onClose(Session session) {
		logger.info("Session : "+session.getId()+" has ended");  //getId:세션 값

		sessionList.remove(session);
	}
		
	
	
}
	

