/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-06-05 08:10:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.socket;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class userTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/D:/kma/testpro03/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/pro03/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/kma/testpro03/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/pro03/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/kma/testpro03/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/pro03/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1714616232383L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html charset=UTF8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("	<title>공지사항 목록</title>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../include/head.jsp", out, false);
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"full-wrap\">\r\n");
      out.write("    <!-- 헤더 부분 인클루드 -->\r\n");
      out.write("    <header id=\"hd\">\r\n");
      out.write("    	<div class=\"container\">\r\n");
      out.write("    		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../include/hd.jsp", out, false);
      out.write("\r\n");
      out.write("    	</div>\r\n");
      out.write("    </header>\r\n");
      out.write("    <main id=\"contents\" class=\"contents\">\r\n");
      out.write(" 	    <section class=\"page\" id=\"page1\">\r\n");
      out.write("    		<h2 class=\"page-title\">UserChat</h2>\r\n");
      out.write("    		<div class=\"page-wrap\">\r\n");
      out.write("    		\r\n");
      out.write("    		\r\n");
      out.write("    		<div style=\"width: 600px; height: 300px;\"  >\r\n");
      out.write("    		\r\n");
      out.write("    			<form >    <!-- 텍스트 박스에 채팅의 내용을 작성한다. -->    \r\n");
      out.write("    				<input id=\"textMessage\" type=\"text\" onkeydown=\"return enter()\">    <!-- 서버로 메시지를 전송하는 버튼 -->    \r\n");
      out.write("    				<input class=\"button is-info\" onclick=\"sendMessage()\" value=\"Send\" type=\"button\">  \r\n");
      out.write("    			</form>  <br />  <!-- 서버와 메시지를 주고 받는 콘솔 텍스트 영역 -->  \r\n");
      out.write("    			\r\n");
      out.write("    			\r\n");
      out.write("    			<form action=\"\" method=\"\" enctype=\"multipart/form-data\"> <!-- enctype=\"multipart/form-data\"는 바이너리 파일을 보낼때 사용 -->\r\n");
      out.write("             		<input id=\"file\" type=\"file\" name=\"file\">\r\n");
      out.write("             		<input onclick=\"sendImg()\" class=\"button is-light\" type=\"submit\" value=\"업로드\">\r\n");
      out.write("					\r\n");
      out.write("					<!-- {selectFile}함수가 파일을 가져오는데 사용할 실제 함수가 될 것 -->\r\n");
      out.write("        		</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("				<textarea id=\"messageTextArea\" rows=\"10\" cols=\"60\" disabled=\"disabled\"></textarea>\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("    		</div>\r\n");
      out.write("    				\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("    			\r\n");
      out.write("    		\r\n");
      out.write("    			<script type=\"text/javascript\">    // 서버의 broadsocket의 서블릿으로 웹 소켓을 한다.   \r\n");
      out.write("    			\r\n");
      out.write("    			var webSocket = new WebSocket(\"ws://localhost:8080/myapp/broadsocket\");    \r\n");
      out.write("    			var messageTextArea = document.getElementById(\"messageTextArea\");     \r\n");
      out.write("    			\r\n");
      out.write("    			webSocket.onopen = function(message) {  // 접속이 완료되면  \r\n");
      out.write("    				messageTextArea.value += \"Server connect...\\n\";       // 콘솔에 메시지를 남긴다.    \r\n");
      out.write("    			};																       \r\n");
      out.write("    			\r\n");
      out.write("    			webSocket.onclose = function(message) { };  	 // 접속이 끝기는 경우는 브라우저를 닫는 경우이기 떄문에 이 이벤트는 의미가 없음.     \r\n");
      out.write("    			\r\n");
      out.write("    			webSocket.onerror = function(message) {    		// 에러가 발생하면           \r\n");
      out.write("    				messageTextArea.value += \"error...\\n\";    \r\n");
      out.write("    			};  	 // 콘솔에 메시지를 남긴다.      \r\n");
      out.write("    			\r\n");
      out.write("    			\r\n");
      out.write("    			\r\n");
      out.write("    			\r\n");
      out.write("    			\r\n");
      out.write("    			webSocket.onmessage = function(message) {      // 서버로부터 메시지가 도착하면 콘솔 화면에 메시지를 남긴다. \r\n");
      out.write("    				messageTextArea.value += \"(관리자) => \" + message.data + \"\\n\";    \r\n");
      out.write("    			};    \r\n");
      out.write("    						\r\n");
      out.write("    						\r\n");
      out.write("    						\r\n");
      out.write("    						// 서버로 메시지를 발송하는 함수    \r\n");
      out.write("    						// Send 버튼을 누르거나 텍스트 박스에서 엔터를 치면 실행    \r\n");
      out.write("    						function sendMessage() {      // 텍스트 박스의 객체를 가져옴      \r\n");
      out.write("    							let message = document.getElementById(\"textMessage\");      // 콘솔에 메세지를 남긴다.      \r\n");
      out.write("    							messageTextArea.value += \"(나) => \" + message.value + \"\\n\";      // 소켓으로 보낸다.      \r\n");
      out.write("    							webSocket.send(message.value);       \r\n");
      out.write("    							console.log(messageTextArea.value);\r\n");
      out.write("    							message.value = \"\";    // 텍스트 박스 초기화 \r\n");
      out.write("    							\r\n");
      out.write("    						}    // 텍스트 박스에서 엔터를 누르면    \r\n");
      out.write("    							\r\n");
      out.write("    						\r\n");
      out.write("    						function enter() {      // keyCode 13은 엔터이다.      \r\n");
      out.write("    							if(event.keyCode === 13) {        // 서버로 메시지 전송        \r\n");
      out.write("    								sendMessage();        // form에 의해 자동 submit을 막는다.        \r\n");
      out.write("    								return false;      \r\n");
      out.write("    							}      \r\n");
      out.write("    							return true;    \r\n");
      out.write("    						}  \r\n");
      out.write("    						\r\n");
      out.write("    						\r\n");
      out.write("    						\r\n");
      out.write("    						//toDataURL로 이미지를 문자열로 변환해서 보낼것\r\n");
      out.write("    						function sendImg(){\r\n");
      out.write("    							var fileInput = document.getElementById('file'); //아이디가 file인 요소를 불러옴\r\n");
      out.write("    							var rawData = fileInput.toDataURL(\"imges/jpg\", 0.5);  //파일 문자열로 변환\r\n");
      out.write("    							webSocket.send(rawData);\r\n");
      out.write("    							\r\n");
      out.write("    							messageTextArea.value += \"(나) => \" + message.value + \"\\n\"; //이미지 보여지도록 수정\r\n");
      out.write("    							\r\n");
      out.write("    							/*\r\n");
      out.write("    							var reader = new FileReader();\r\n");
      out.write("    							reader.onload = function(event){\r\n");
      out.write("    								webSocket.send(rawData);\r\n");
      out.write("    							};\r\n");
      out.write("    							\r\n");
      out.write("    							reader.readAsDataURL(file);  */\r\n");
      out.write("    						}\r\n");
      out.write("    						\r\n");
      out.write("    						\r\n");
      out.write("    						//파일을 선택하고 해당 파일의 이름을 메시지로 보내며 선택할 파일을 설정\r\n");
      out.write("    						function selectFile(e){  //e를 매개변수로 받음\r\n");
      out.write("    							sendMessage(e.target.files[0].name);  //첫번째로 선택된 파일의 이름 \r\n");
      out.write("    							\r\n");
      out.write("    							setFile(e.target.files[0]);\r\n");
      out.write("    							//두개의 업데이터 함수 호출\r\n");
      out.write("    						}\r\n");
      out.write("    							\r\n");
      out.write("    			</script>\r\n");
      out.write("\r\n");
      out.write("    		\r\n");
      out.write("    		</div>\r\n");
      out.write("    	</section>\r\n");
      out.write("    </main>\r\n");
      out.write("    <!-- 푸터 부분 인클루드 -->\r\n");
      out.write("    <footer id=\"ft\">\r\n");
      out.write("    	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../include/ft.jsp", out, false);
      out.write("\r\n");
      out.write("    </footer>\r\n");
      out.write("</div>    \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
